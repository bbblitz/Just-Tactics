package JTClient;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ConnectException;
import java.net.Socket;

import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.Timer;

import JTServer.Occupier;


public class ClientApplet extends JApplet{
	private Socket s;
	private String ADDRESS = "127.0.0.1";
	private PrintWriter out;
	private BufferedReader in;
	private JLabel state;
	private JLabel display;
	/**ints to use for communication between server and client
	 * 
	 * 
	 * 0 - server ping - client checks to make sure server is still responding
	 * 1 - client ping - server checks to make sure client is still responding
	 * 
	 * 2 - client order - precedes an order generated by the client, going to the server
	 * 3 - request occupiers - sent from client to server to request occupiers
	 * 
	 * 4 - give occupiers - sent from server to client, precedes occupiers
	 * 
	 */
	public void init()
	{
	    try 
	    {
	        javax.swing.SwingUtilities.invokeAndWait(new Runnable() {
	            public void run() {
	                makeGUI();
	            }
	        });
	    } 
	    catch (Exception e) 
	    {
	        System.err.println("createGUI didn't successfully complete");
	        e.printStackTrace();
	    }
	    this.createConnection();
	    
	    System.out.println("init ended");
	}

	public void start()
	{
		
	}
	
	/*Ask server for all occupiers*/
	public Occupier[] getOccupiers()
	{
		return null;
	}
	
	private void makeGUI()
	{
		/**Set size and add buttons*/
		this.setSize(500,500);
		Container content = this.getContentPane();
		state = new JLabel();
		add(state, BorderLayout.NORTH);
		state.setText("Starting applet...");
		
		JButton rOccupiers = new JButton("Request Occupiers");
		content.add(rOccupiers, BorderLayout.WEST);
		
		JButton sendOrder = new JButton("Send an order");
		content.add(sendOrder, BorderLayout.EAST);
		
		display = new JLabel();
		content.add(display, BorderLayout.SOUTH);
		
	
		/**Action listener to detect send order request*/
		class Request implements ActionListener
		{
			public void actionPerformed(ActionEvent arg0)
			{
				state.setText("attempting to request occupiers");
				out.write("99");
				System.out.println("Did request");
			    try 
			    {
			        javax.swing.SwingUtilities.invokeAndWait(new Runnable() {
			            public void run() {
			            	System.out.println(getNewMessage());
			            }
			        });
			    } 
			    catch (Exception e) 
			    {
			        System.err.println("getNewMessage failed :(");
			        e.printStackTrace();
			    }
				
			}
			
		}
		Request r = new Request();
		rOccupiers.addActionListener(r);
		
		/**Action listener to detect new messages button*/
		class Close implements ActionListener
		{
			public void actionPerformed(ActionEvent arg0)
			{
				System.out.println("Attempting to get new messages");
				state.setText(getNewMessage());
			}
		}
		Close c = new Close();
		sendOrder.addActionListener(c);
		state.setText("Created Request actionlistener");
	}
	
	public void displayStartupScreen()
	{
		this.removeAll();
		this.setBackground(new Color(0,61,0));
		JButton startButton = new JButton("Start");
		add(startButton);
		try{
			in = new BufferedReader(new InputStreamReader(s.getInputStream()));
			out = new PrintWriter(s.getOutputStream(),true);
			state.setText("Connection started");
		} catch (IOException e) {
		    System.out.println("Read failed");
		    e.printStackTrace();
		    state.setText("IOException, connected to the server, but could not create client resources");
		}
	}
	
	/**Create all the necessary infrastructure for the client/server communication*/
	public void createConnection()
	{
		/**Attempt to connect to the server*/
		state.setText("Attempting to connect to server");
		try 
		{
			s = new Socket(ADDRESS, 81);
		} 
		catch (ConnectException e)
		{
			state.setText("Connection exception, has the server port forwarded?");
			e.printStackTrace();
		}
		catch (IOException e) 
		{
			state.setText("IOException, be sure the server is running, and you can connect!");
			e.printStackTrace();
		}
		
		/**Attempt to get the buffered input and output streams*/
		state.setText("Establishing connection to server");
		try{
			in = new BufferedReader(new InputStreamReader(s.getInputStream()));
			out = new PrintWriter(s.getOutputStream(),true);
			state.setText("Connection started");
		} catch (IOException e) {
		    System.out.println("Read failed");
		    e.printStackTrace();
		    state.setText("IOException, connected to the server, but could not create client resources");
		}
	
	}
	
	public void close()
	{
		try {
			in.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		out.close();
		try {
			s.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**Gets any new messages that have been sent by the server*/
	private String getNewMessage()
	{
		System.out.println("Getting new messages...");
		state.setText("Getting message...");
		String output = "";
		int newnum = -1;
		try 
		{
			System.out.println("Attempting to read");
			newnum = in.read();
			System.out.println("Finished read");
		}
		catch (IOException e1) 
		{
			e1.printStackTrace();
		}
		while(newnum != -1)
		{
			System.out.println("Added " + ((char)newnum));
			output += ((char)newnum);
			try 
			{
				newnum = in.read();
			} 
			catch (IOException e) 
			{
				e.printStackTrace();
			}
		}
		
		do
		{
			System.out.println("In the loop");
			try 
			{
				System.out.println("Trying..");
				newnum = in.read();
				System.out.println("Tried");
			} 
			catch (IOException e) 
			{
				System.out.println("caught");
				e.printStackTrace();
			}
			if(newnum != -1)
			{

			}
		}
		while(newnum != -1);
		System.out.println("Out of the loop, data is " + output);
		state.setText("Got message: " + output);
		return output;
	}
	
	public void endTurn()
	{
		
	}
	
	public void getState()
	{
		
	}

}
